package testing;

import client.KVStore;
import ecs.ECS;
import ecs.ECSNode;
import ecs.IECSNode;
import junit.framework.TestCase;
import org.apache.log4j.Logger;
import org.apache.zookeeper.KeeperException;
import org.junit.Test;
import shared.messages.KVMessage;

import java.io.IOException;
import java.util.Map;

public class AdditionalTest extends TestCase {

    private static Logger logger = Logger.getRootLogger();

    private ECS ecs;

    private KVStore kvClient_FIFO;
    private KVStore kvClient_LRU;
    private KVStore kvClient_LFU;

    private int FIFO_port = -1;
    private int LRU_port = -1;
    private int LFU_port = -1;


    public void setUp() throws IOException, InterruptedException, KeeperException {


        ecs = new ECS("./ecs.config");
        Thread.sleep(2000);

        ecs.addNodes(1, "FIFO", 10);
        Thread.sleep(2000);

        ecs.addNodes(1, "LRU", 10);
        Thread.sleep(2000);

        ecs.addNodes(1, "LFU", 10);
        Thread.sleep(2000);

        ecs.start();
        Thread.sleep(2000);

        Map<String, IECSNode> ecsNodes = ecs.getNodes();

        for (Map.Entry<String, IECSNode> entry : ecsNodes.entrySet()) {
            ECSNode n = (ECSNode) entry.getValue();

            switch (n.getReplacementStrategy()) {
                case "FIFO":
                    FIFO_port = n.getNodePort();
                    break;

                case "LRU":
                    LRU_port = n.getNodePort();
                    break;

                case "LFU":
                    LFU_port = n.getNodePort();
                    break;
            }
        }

        assertTrue(FIFO_port != -1 && LRU_port != -1 && LFU_port != -1);

        kvClient_FIFO = new KVStore("localhost", FIFO_port);
        kvClient_LRU = new KVStore("localhost", LRU_port);
        kvClient_LFU = new KVStore("localhost", LFU_port);

        try {
            kvClient_FIFO.connect();
            kvClient_LRU.connect();
            kvClient_LFU.connect();
        } catch (Exception ignored) {
        }
    }

    public void tearDown() throws Exception {

        kvClient_FIFO.disconnect();
        kvClient_LRU.disconnect();
        kvClient_LFU.disconnect();

        ecs.shutdown();
        Thread.sleep(2000);
    }

//    @Test
//    public void test_Connection() {
//        Exception ex1 = null, ex2 = null;
//        KVStore kvClient = new KVStore("localhost", FIFO_port);
//        try {
//            kvClient.connect();
//        } catch (Exception e) {
//            ex1 = e;
//        }
//        try {
//            kvClient.disconnect();
//        } catch (Exception e) {
//            ex2 = e;
//        }
//        assertNull(ex1);
//        assertNull(ex2);
//    }

    @Test
    public void test_SetValue() {
        String key = "aaaaaaaaaaaaaaaaaaaaaaaaaa";
        String val = "12356871264918gdhsbfsdb";
        KVMessage response = null;
        Exception ex = null;
        try {
            response = kvClient_FIFO.put(key, val);
        } catch (Exception e) {
            ex = e;
        }
        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.PUT_SUCCESS);

    }

    @Test
    public void test_GetValue() {
        String key = "aaaaaaaaaaaaaaaaaaaaaaaaaa";
        String val = "12356871264918gdhsbfsdb";
        KVMessage response = null;
        Exception ex = null;
        try {
            response = kvClient_FIFO.put(key, val);
            response = kvClient_FIFO.get(key);
        } catch (Exception e) {
            ex = e;
        }
        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.GET_SUCCESS
                && response.getValue().equals(val));

    }

    @Test
    public void test_UpdateValue() {
        String key = "aaaaaaaaaaaaaaaaaaaaaaaaaa";
        String val1 = "123dn", val2 = "456cb";
        KVMessage update_response = null, get_response = null;
        Exception ex = null;
        try {
            kvClient_FIFO.put(key, val1);
            update_response = kvClient_FIFO.put(key, val2);
            get_response = kvClient_FIFO.get(key);
        } catch (Exception e) {
            ex = e;
        }
        assertTrue(ex == null && update_response.getStatus() == KVMessage.StatusType.PUT_UPDATE
                && get_response.getValue().equals(val2));

    }

    @Test
    public void test_GetNonExist() {
        String key = "aaaaaaaaaaaaaaaaaaaaaaaaaa";
        KVMessage response = null;
        Exception ex = null;
        try {
            response = kvClient_FIFO.get(key);
        } catch (Exception e) {
            ex = e;
        }
        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.GET_ERROR);

    }


    @Test
    public void test_PutLongStr() {
        StringBuilder longKey = new StringBuilder();
        StringBuilder longVal = new StringBuilder();
        for (int i = 0; i < 1024; i++) {
            longVal.append("aaaaaaaaaaaaaaaaaaaaaaaaaa");
            longKey.append("aaaaaaaaaaaaaaaaaaaaaaaaaa");
        }
        KVMessage response = null;
        Exception ex = null;

        try {
            response = kvClient_FIFO.put(longKey.toString(), longVal.toString());
        } catch (Exception e) {
            ex = e;
        }

        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.PUT_ERROR);

    }

    @Test
    public void test_DeletePair() {
        String key = "aaaaaaaaaaaaaaaaaaaaaaaaaa";
        String val1 = "123dn", val2 = "456cb";
        KVMessage response = null;
        Exception ex = null;

        try {
            response = kvClient_FIFO.put(key, val1);
            response = kvClient_FIFO.put(key, "");
        } catch (Exception e) {
            ex = e;
        }

        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.DELETE_SUCCESS);

    }

    @Test
    public void test_DeleteNonExist() {
        String key = "qwertyuiopasdfghjklzxcvbnm";
        KVMessage response = null;
        Exception ex = null;

        try {
            response = kvClient_FIFO.put(key, "");
        } catch (Exception e) {
            ex = e;
        }

        assertTrue(ex == null && response.getStatus() == KVMessage.StatusType.DELETE_ERROR);

    }

//    @Test
//    public void test_FIFOFunc() {
//        // FIFO
//        Exception ex = null;
//        long in_cache = 0, out_cache = 0;
//        try {
//            for (int i = 0; i < 10; i++) {
//                kvClient_FIFO.put("A" + i, "Value" + i);
//            }
//            for (int i = 0; i < 10; i++) {
//                assertTrue(AllTests.server_FIFO.inCache("Key" + i));
//            }
//
//            // key 0 should be removed
//            kvClient_FIFO.put("A" + 10, "Value" + 10);
//            assertFalse(AllTests.server_FIFO.inCache("Key" + 0));
//            for (int i = 1; i < 10; i++) {
//                assertTrue(AllTests.server_FIFO.inCache("Key" + i));
//            }
//
//            // key 1 should be removed
//            kvClient_FIFO.put("A" + 11, "Value" + 11);
//            assertFalse(AllTests.server_FIFO.inCache("Key" + 0));
//            assertFalse(AllTests.server_FIFO.inCache("Key" + 1));
//            for (int i = 2; i < 10; i++) {
//                assertTrue(AllTests.server_FIFO.inCache("Key" + i));
//            }
//
//        } catch (Exception e) {
//            ex = e;
//        }
//
//        assertNull(ex);
//        logger.info("Cache hit time: " + in_cache + "- Cache miss time: " + out_cache);
//
//    }
//
//    @Test
//    public void test_LRUFunc() {
//        // FIFO
//        Exception ex = null;
//        long in_cache = 0, out_cache = 0;
//        try {
//            for (int i = 0; i < 10; i++) {
//                kvClient_LRU.put("Key" + i, "Value" + i);
//            }
//
//            // make "key9" becomes LRU
//            for (int i = 0; i < 9; i++) {
//                kvClient_LRU.get("Key" + i);
//            }
//            kvClient_LRU.put("Key" + 10, "Value" + 10);
//            for (int i = 0; i < 9; i++) {
//                assertTrue(AllTests.server_LRU.inCache("Key" + i));
//            }
//            assertFalse(AllTests.server_LRU.inCache("Key" + 9));
//
//
//            // make key0 becomes LRU
//            for (int i = 1; i < 9; i++) {
//                kvClient_LRU.get("Key" + i);
//            }
//            kvClient_LRU.put("Key" + 11, "Value" + 11);
//            for (int i = 1; i < 9; i++) {
//                assertTrue(AllTests.server_LRU.inCache("Key" + i));
//            }
//            assertFalse(AllTests.server_LRU.inCache("Key" + 0));
//            assertTrue(AllTests.server_LRU.inCache("Key" + 10));
//            assertTrue(AllTests.server_LRU.inCache("Key" + 11));
//
//        } catch (Exception e) {
//            ex = e;
//        }
//
//        assertNull(ex);
//        logger.info("Cache hit time: " + in_cache + "- Cache miss time: " + out_cache);
//
//    }
//
//
//    @Test
//    public void test_LFUFunc() {
//        // FIFO
//        Exception ex = null;
//        long in_cache = 0, out_cache = 0;
//        try {
//            for (int i = 0; i < 10; i++) {
//                kvClient_LFU.put("Key" + i, "Value" + i);
//            }
//            // key: 0-4, frequency: 2
//            for (int i = 0; i < 5; i++) {
//                kvClient_LFU.get("Key" + i);
//                kvClient_LFU.get("Key" + i);
//            }
//            // key: 6-9, frequency: 1
//            for (int i = 6; i < 10; i++) {
//                kvClient_LFU.get("Key" + i);
//            }
//
//            // KV pair of frequency 2(i.e. key-5) should be removed
//            int t = 10;
//            kvClient_LFU.put("Key" + t, "Value" + t);
//
//            // key 5 should be removed
//            assertFalse(AllTests.server_LFU.inCache("Key" + 5));
//            for (int i = 0; i < 5; i++) {
//                assertTrue(AllTests.server_LFU.inCache("Key" + i));
//            }
//            for (int i = 6; i < 10; i++) {
//                assertTrue(AllTests.server_LFU.inCache("Key" + i));
//            }
//
//            t = 11;
//            kvClient_LFU.put("Key" + t, "Value" + t);
//            // KV pair of frequency 0(i.e 10) should now be removed
//            for (int i = 0; i < 5; i++) {
//                assertTrue(AllTests.server_LFU.inCache("Key" + i));
//            }
//            for (int i = 6; i < 10; i++) {
//                assertTrue(AllTests.server_LFU.inCache("Key" + i));
//            }
//            assertFalse(AllTests.server_LFU.inCache("Key" + 10));
//
//
//        } catch (Exception e) {
//            ex = e;
//        }
//
//        assertNull(ex);
//        logger.info("Cache hit time: " + in_cache + "- Cache miss time: " + out_cache);
//
//    }


    @Test
    public void test_CachePerf() {

        int[] access_sequence = new int[]{309, 52, 144, 37, 155, 279, 470, 257, 158, 378, 331, 329, 185, 11, 226, 388, 92, 295, 420, 315,
                309, 264, 465, 183, 450, 389, 80, 122, 160, 292, 87, 136, 19, 16, 33, 231, 64, 85, 162, 58, 236, 417, 378, 235, 253, 353, 399, 213,
                297, 347, 19, 125, 470, 116, 121, 426, 69, 249, 449, 6, 467, 146, 100, 148, 412, 94, 299, 492, 54, 177, 499, 82, 128, 435, 298, 123,
                384, 94, 436, 471, 142, 96, 80, 416, 498, 61, 168, 319, 255, 494, 303, 223, 70, 363, 317, 286, 376, 196, 194, 286, 437, 382, 375,
                429, 466, 320, 184, 452, 198, 196, 138, 219, 317, 246, 274, 494, 248, 250, 349, 290, 458, 81, 322, 200, 343, 471, 265, 359, 465,
                357, 374, 64, 344, 346, 166, 13, 196, 157, 77, 283, 289, 149, 293, 318, 365, 105, 273, 14, 242, 234, 48, 173, 92, 291, 375, 164, 299,
                62, 65, 461, 341, 177, 285, 133, 285, 137, 44, 316, 126, 470, 309, 494, 206, 118, 256, 376, 107, 19, 134, 367, 398, 143, 416, 113, 111,
                16, 95, 43, 218, 348, 288, 32, 465, 387, 322, 230, 203, 87, 233, 266, 311, 110, 341, 311, 65, 26, 104, 236, 458, 435, 193, 296, 27, 309,
                482, 11, 442, 25, 343, 103, 257, 478, 143, 225, 238, 59, 149, 439, 168, 173, 238, 272, 287, 200, 32, 290, 313, 328, 496, 414, 14, 1, 71, 187,
                307, 301, 160, 106, 125, 386, 281, 278, 346, 121, 206, 206, 261, 40, 39, 82, 118, 312, 41, 126, 111, 179, 341, 357, 482, 375, 352, 85, 499,
                189, 320, 103, 141, 344, 166, 334, 18, 229, 474, 243, 281, 34, 425, 76, 261, 7, 456, 416, 459, 157, 364, 250, 186, 96, 400, 474, 292, 47, 333,
                135, 224, 186, 342, 223, 156, 92, 434, 210, 105, 290, 470, 93, 498, 54, 165, 306, 171, 414, 206, 25, 9, 404, 427, 86, 74, 271, 204, 392, 447,
                123, 453, 40, 325, 75, 339, 332, 420, 330, 311, 149, 22, 183, 337, 299, 303, 178, 96, 133, 18, 7, 361, 355, 265, 308, 320, 149, 43, 85, 43,
                234, 246, 174, 124, 393, 170, 166, 142, 293, 121, 357, 140, 43, 382, 202, 177, 143, 241, 283, 323, 381, 410, 5, 248, 345, 482, 287, 367, 151,
                363, 460, 395, 367, 366, 325, 175, 282, 299, 249, 6, 87, 496, 99, 376, 81, 24, 278, 87, 185, 445, 51, 90, 326, 447, 380, 96, 224, 118, 100,
                424, 61, 52, 328, 468, 310, 259, 55, 305, 229, 265, 298, 293, 412, 76, 420, 119, 466, 430, 69, 58, 16, 482, 130, 365, 51, 171, 479, 458, 479,
                399, 241, 22, 259, 121, 308, 273, 496, 376, 329, 274, 214, 95, 30, 412, 99, 9, 496, 333, 93, 8, 445, 143, 466, 437, 103, 335, 331, 309, 429,
                346, 434, 172, 351, 226, 214, 226, 36, 79, 164, 374, 301, 204, 187, 84, 19, 103, 300, 237, 304, 311, 66, 176, 213, 179, 28, 77, 299, 193, 235,
                80, 148, 246, 363, 236, 122, 196, 157, 7, 131, 78, 411, 4, 143, 184, 387, 164, 429, 28, 471, 239, 368, 73, 356, 319, 224, 318, 90, 127, 1, 97,
                214, 453, 161, 287, 354, 378, 230, 383, 220, 197, 166, 205, 325, 23, 20, 172, 409, 303, 415, 74, 373, 483, 402, 107, 372, 12, 103, 367, 226, 317,
                120, 24, 422, 218, 33, 331, 255, 393, 449, 63, 418, 459, 427, 388, 53, 471, 189, 331, 375, 29, 114, 366, 337, 40, 124, 134, 259, 437, 33, 156,
                155, 156, 300, 105, 113, 397, 163, 13, 136, 489, 9, 494, 91, 208, 286, 377, 185, 70, 36, 203, 422, 201, 352, 233, 208, 361, 18, 54, 483,
                25, 311, 115, 266, 165, 143, 362, 21, 26, 145, 51, 471, 202, 350, 447, 21, 69, 208, 48, 351, 205, 98, 56, 68, 252, 53, 163, 213, 390,
                149, 148, 46, 366, 310, 366, 431, 178, 359, 446, 32, 90, 262, 485, 26, 369, 184, 114, 168, 343, 418, 484, 13, 229, 64, 283, 202, 47,
                498, 110, 233, 248, 83, 400, 76, 292, 261, 47, 171, 117, 290, 300, 202, 215, 386, 419, 476, 188, 69, 284, 289, 150, 337, 428, 388,
                37, 16, 376, 94, 214, 413, 265, 127, 114, 72, 4, 489, 81, 137, 262, 205, 419, 234, 88, 450, 453, 155, 396, 102, 335, 160, 482, 357,
                211, 295, 154, 283, 52, 133, 227, 50, 341, 97, 197, 62, 91, 194, 412, 239, 181, 302, 251, 139, 408, 181, 470, 475, 378, 418, 167, 147,
                279, 373, 47, 131, 15, 157, 312, 305, 161, 52, 247, 18, 26, 448, 391, 229, 53, 127, 474, 232, 40, 361, 15, 113, 63, 34, 193, 51, 127,
                63, 107, 444, 145, 425, 103, 500, 332, 418, 342, 347, 409, 177, 41, 152, 130, 32, 175, 405, 174, 150, 119, 281, 296, 307, 287, 319, 10,
                84, 110, 310, 142, 143, 206, 119, 115, 92, 381, 123, 346, 194, 314, 448, 343, 362, 78, 384, 247, 148, 290, 252, 94, 434, 208, 252, 183,
                341, 183, 308, 372, 216, 10, 86, 169, 418, 259, 191, 257, 329, 98, 494, 257, 437, 262, 446, 83, 110, 481, 477, 396, 435, 229, 370, 405,
                446, 208, 482, 251, 428, 267, 145, 29, 264, 269, 299, 321, 373, 154, 239, 312, 339, 207, 211, 441, 453, 222, 265, 208, 134, 437, 305, 471,
                401, 283, 426, 9, 142, 344, 57, 110, 395, 478, 387, 200, 432, 427, 293, 290, 341, 405, 214, 298, 332, 199, 101, 233, 463, 375, 41, 465, 22,
                84, 217, 409, 180, 103, 238, 238, 283, 131, 89, 261, 26, 373, 491, 396, 191, 233, 444, 301, 186, 80, 17, 218, 112, 435, 73, 209, 317, 250,
                270, 198, 319, 61, 233, 223, 229, 23, 127, 297, 348, 272, 352, 178, 347, 85, 181, 233, 353, 246, 470, 27, 242, 492, 7, 268, 101, 490, 381,
                86, 71, 358, 500, 29, 200, 317, 83, 87, 292, 106, 168, 217, 405, 254, 406, 24, 500, 4, 361, 209, 447, 30, 103, 107, 135, 140, 115, 90, 391,
                57, 23, 287, 112, 330, 326, 424, 90, 105, 87, 99, 98, 7, 476, 349, 398, 150, 475, 8, 259, 483, 233, 469, 79, 488, 170, 494, 410, 244, 260,
                122, 256, 378, 453, 491, 7, 2, 108, 440, 119, 431, 337, 370, 35, 233, 30, 379, 298, 81, 446, 211, 489, 5, 94, 350, 415, 75, 153, 126, 367,
                243, 468, 272, 180, 173, 221, 273, 227, 311, 450, 107, 207, 22, 89, 296, 116, 416, 51, 186, 213, 251, 90, 73, 195, 120, 69, 242, 346, 34,
                107, 496, 179, 125, 166, 459, 453, 394, 244, 396, 442, 192, 255, 69, 162, 44, 165, 83, 425, 196, 494, 195, 116, 225, 120, 444, 423, 495,
                375, 433, 203, 461, 256, 118, 460, 285, 283, 93, 35, 126, 31, 189, 400, 311, 4, 208, 213, 182, 411, 5, 129, 107, 303, 343, 268, 186, 468,
                201, 466, 301, 25, 378, 175, 123, 260, 122, 102, 130, 269, 172, 2, 335, 120, 276, 43, 426, 31, 208, 145, 420, 102, 447, 101, 113, 98, 37,
                242, 8, 416, 159, 2, 297, 61, 135, 22, 415, 154, 488, 257, 187, 343, 405, 402, 292, 333, 35, 464, 212, 159, 483, 245, 298, 195, 321, 84,
                430, 65, 333, 225, 176, 482, 432, 305, 368, 68, 235, 453, 298, 73, 244, 194, 415, 157, 458, 491, 6, 33, 109, 374, 170, 326, 399, 56, 399,
                380, 23, 172, 69, 74, 161, 272, 43, 460, 261, 82, 85, 166, 57, 132, 76, 215, 147, 414, 59, 243, 454, 293, 279, 474, 313, 74, 363, 500, 428,
                154, 153, 398, 181, 71, 452, 449, 8, 482, 317, 464, 123, 413, 72, 415, 338, 411, 284, 157, 221, 103, 110, 348, 67, 313, 435, 430, 484, 215, 45, 242, 416, 126, 354,
                148, 70, 68, 152, 60, 467, 381, 456, 289, 287, 41, 446, 184, 109, 42, 417, 231, 47, 297, 229, 101, 289, 380, 249, 112, 445, 409, 191, 437, 479, 320, 167, 36, 308,
                237, 48, 97, 452, 233, 119, 359, 106, 70, 194, 102, 6, 323, 245, 58, 436, 399, 189, 168, 168, 459, 149, 160, 487, 124, 314, 413, 497, 258, 472, 446, 253, 45, 264,
                73, 122, 445, 182, 459, 182, 422, 60, 272, 104, 32, 130, 487, 49, 408, 349, 339, 187, 17, 165, 145, 233, 259, 292, 234, 70, 151, 300, 335, 17, 260, 30, 85, 53, 68,
                487, 139, 114, 410, 208, 179, 91, 144, 457, 383, 485, 17, 140, 313, 406, 117, 202, 183, 17, 245, 315, 185, 442, 177, 15, 236, 259, 4, 483, 387, 115, 159, 457, 447,
                358, 432, 360, 97, 261, 352, 209, 237, 360, 403, 353, 364, 22, 269, 500, 36, 5, 307, 461, 420, 280, 156, 102, 9, 164, 55, 283, 461, 236, 77, 301, 100, 378, 390, 76,
                140, 400, 150, 367, 66, 407, 132, 148, 3, 262, 192, 98, 151, 320, 276, 323, 297, 413, 429, 74, 330, 10, 129, 387, 396, 454, 432, 475, 251, 12, 19, 234, 113, 187,
                143, 57, 397, 214, 42, 12, 201, 13, 461, 185, 236, 18, 33, 253, 178, 376, 54, 277, 342, 304, 485, 332, 58, 364, 123, 164, 184, 65, 148, 104, 157, 22, 231, 247,
                351, 172, 276, 463, 178, 244, 374, 313, 147, 374, 218, 13, 110, 188, 98, 252, 459, 34, 428, 234, 346, 420, 482, 335, 264, 197, 41, 77, 294, 128, 156, 293, 429,
                286, 405, 341, 384, 85, 394, 97, 271, 453, 433, 135, 411, 434, 59, 213, 323, 257, 177, 183, 168, 11, 494, 401, 96, 422, 500, 310, 462, 384, 324, 153, 378, 368,
                59, 371, 172, 412, 19, 11, 24, 380, 460, 153, 319, 180, 399, 229, 174, 439, 378, 316, 414, 332, 412, 303, 300, 311, 389, 114, 173, 74, 82, 157, 301, 438, 286,
                358, 471, 4, 330, 141, 76, 362, 244, 123, 358, 201, 17, 98, 461, 330, 408, 15, 457, 92, 294, 387, 167, 169, 134, 207, 24, 62, 259, 452, 206, 478, 256, 442, 284,
                262, 302, 167, 31, 437, 152, 137, 313, 426, 461, 434, 466, 405, 457, 337, 162, 104, 411, 52, 425, 146, 360, 416, 386, 90, 406, 117, 59, 264, 164, 229, 69, 429,
                288, 226, 168, 130, 337, 273, 478, 32, 253, 142, 330, 487, 20, 278, 253, 240, 83, 401, 253, 445, 142, 11, 438, 107, 105, 407, 264, 18, 380, 107, 269, 333, 373,
                422, 5, 366, 238, 233, 142, 494, 434, 500, 471, 386, 51, 370, 360, 326, 362, 325, 146, 54, 257, 302, 283, 363, 487, 385, 18, 144, 108, 133, 324, 79, 262, 122,
                420, 139, 188, 250, 200, 47, 269, 56, 478, 310, 139, 345, 158, 188, 91, 363, 446, 221, 229, 84, 23, 42, 149, 495, 303, 65, 91, 89, 164, 327, 202, 225, 176, 58,
                202, 58, 199, 118, 284, 327, 270, 192, 170, 335, 239, 219, 18, 471, 427, 276, 276, 379, 385, 190, 179, 344, 268, 127, 319, 28, 109, 106, 473, 61, 314, 384, 190,
                144, 415, 246, 301, 332, 310, 349, 318, 500, 193, 364, 373, 16, 309, 107, 293, 102, 5, 174, 269, 271, 216, 416, 217, 262, 132, 442, 358, 358, 437, 137, 197, 298,
                299, 85, 305, 335, 65, 221, 251, 106, 405, 168, 412, 85, 172, 192, 199, 280, 472, 105, 407, 259, 73, 490, 34, 412, 298, 30, 354, 447, 448, 110, 95, 470, 48, 225,
                401, 454, 228, 264, 280, 409, 462,
                335, 401, 428, 440, 189, 351, 95, 429, 357, 176, 401, 264, 192, 287, 168, 65, 309, 484, 386, 364, 270, 127, 62, 23, 121, 59, 321, 489, 421, 125, 377, 133, 358,
                397, 416, 212, 287, 98, 423, 249, 69, 308, 187, 238, 433, 39, 62, 42, 184, 399, 295, 458, 330, 458, 267, 475, 380, 151, 88, 275, 57, 447, 388, 175, 52, 240, 66,
                217, 402, 28, 260, 483, 450, 284, 10, 63, 417, 163, 486, 63, 70, 148, 342, 60, 434, 437, 388, 5, 272, 270, 234, 384, 281, 481, 280, 311, 416, 259, 103, 191, 234,
                482, 71, 326, 205, 68, 381, 370, 75, 114, 139, 16, 149, 62, 201, 70, 179, 175, 155, 249, 141, 349, 355, 98, 289, 384, 408, 470, 94, 224, 75, 190, 312, 322, 25,
                290, 210, 237, 354, 242, 416, 45, 63, 202, 470, 442, 129, 92, 98, 161, 190, 117, 91, 386, 283, 247, 262, 55, 318, 470, 205, 144, 404, 72, 220, 341, 221, 37, 89,
                482, 431, 104, 46, 124, 339, 422, 160, 418, 169, 269, 494, 364, 491, 372, 66, 461, 240, 480, 387, 287, 51, 243, 184, 170, 88, 499, 198, 63, 493, 13, 122, 139,
                295, 393, 99, 139, 293, 2, 306, 334, 446,
                109, 345, 344, 276, 127, 364, 158, 170, 250, 216, 228, 475, 204, 348, 210, 64, 251, 484, 72, 317, 464, 171, 348, 204, 349, 285, 126, 307, 145, 130, 426,
                112, 119, 404, 288, 266, 101, 364, 101, 168, 262, 168, 5, 240, 147, 261, 157, 15, 406, 372, 357, 237, 291, 493, 498, 58, 315, 483, 10, 448, 327, 438, 460, 245,
                267, 247, 381, 209, 430, 419, 370, 446, 16, 387, 43, 193, 358, 267, 308, 251, 359, 488, 441, 432, 69, 457, 402, 492, 427, 123, 229, 243, 312, 141, 194, 410, 378,
                383, 17, 93, 257, 424, 214, 220, 246, 183, 233, 442, 130, 144, 6, 92, 469, 104, 255, 284, 8, 162, 430, 81, 359, 304, 184, 5, 403, 474, 321, 229, 423, 389, 74,
                208, 211, 14, 13, 308, 114, 449, 71, 303, 120, 429, 280, 415, 142, 440, 441, 174, 493, 402, 144, 314, 16, 498, 189, 150, 4, 366, 301, 178, 311, 227, 431, 252,
                212, 253, 280, 268, 454, 94, 289, 381, 453, 211, 496, 293, 361, 455, 469, 4, 89, 74, 92, 229, 317, 448, 60, 370, 166, 243, 239, 192, 284, 378, 432, 53, 341,
                305, 308, 114, 106, 457, 154, 179, 362, 147,
                69, 456, 205, 214, 408, 14, 434, 199, 118, 134, 178, 18, 423, 274, 346, 26, 259, 69, 295, 90, 195, 195, 79, 247, 406, 482, 294, 374, 82, 86, 395, 224, 96, 307,
                483, 426, 346, 180, 331, 312, 26, 161, 468, 407,
                462, 369, 176, 5, 96, 389, 385, 270, 129, 434, 137, 31, 322, 161, 481, 149, 76, 488, 187, 417, 462, 73, 263, 244, 322, 480, 205, 496, 445, 70, 118, 245, 408,
                169, 139, 467, 245, 381, 448, 104, 450, 322, 67, 183, 362, 442, 407, 264, 109, 241, 431, 210, 230, 34, 54, 282, 350, 262, 173, 207, 226, 300, 399, 109, 1, 30,
                232, 422, 135, 369, 32, 421, 41, 406, 325, 107, 370, 67, 40, 369, 28, 284, 349, 488, 381, 100, 429, 319, 430, 454, 72, 440, 291, 262, 162, 199, 30, 49, 276, 296,
                258, 428, 411, 391, 435, 395, 412, 167,
                90, 316, 365, 311, 383, 393, 220, 187, 364, 185, 36, 277, 295, 261, 141, 391, 322, 154, 172, 149, 44, 173, 302, 93, 293, 233, 173, 160, 196, 77, 135, 450, 422,
                169, 407, 455, 165, 473, 121, 374, 244, 124, 33, 309, 52, 438, 322, 91, 435, 309, 352, 24, 182, 173, 341, 93, 371, 182, 3, 179, 330, 269, 220, 408, 488, 207,
                299, 79, 1, 120, 500, 297, 211, 418, 306, 425, 245, 335, 192, 358, 89, 269, 298, 62, 432, 162, 414, 482, 491, 80, 496, 305, 4, 218, 62, 491, 43, 108, 493,
                103, 219, 269, 282, 188, 33, 164, 169, 458,
                406, 117, 246, 196, 75, 121, 208, 411, 59, 13, 252, 21, 102, 446, 153, 112, 348, 56, 216, 375, 347, 228, 239, 392, 232, 496, 370, 174, 44, 336, 275, 199, 495,
                482, 293, 240, 456, 359, 281, 131, 118, 261, 459, 420, 54, 469, 75, 78, 18, 347, 451, 132, 267, 328, 276, 40, 139, 132, 478, 227, 200, 146, 285,
                177, 179, 461, 233, 102, 465, 342, 498, 204, 474, 32, 157, 485, 458, 200, 438, 453, 466, 442, 98, 279, 17, 230, 219, 57, 436, 121, 321, 104, 367, 142, 47, 156,
                311, 125, 240, 140, 485, 300, 293, 390, 441, 15, 130, 67, 416, 410, 91, 73, 30, 389, 335, 263, 480, 1, 58, 474, 395, 459, 389, 6, 328, 443, 195, 451, 347, 390,
                404, 446, 37, 496, 451, 497, 70, 108, 88, 121, 10, 2, 458, 435, 94, 6, 466, 241, 253, 253, 425, 256, 337, 276, 435, 214, 329, 382, 52, 400, 480, 35, 61, 57,
                148, 91, 407, 293, 488, 71, 57, 228, 227,
                211, 409, 189, 383, 72, 202, 442, 180, 481, 53, 494, 190, 469, 11, 341, 215, 80, 348, 256, 38, 19, 137, 137, 381, 250, 292, 219, 209, 491, 112, 147, 173, 500,
                380, 335, 157, 391, 25, 153, 292, 136, 54, 233, 205,
                348, 339, 216, 479, 184, 235, 255, 264, 201, 267, 475, 177, 240, 113, 499, 184, 483, 157, 200, 347, 237, 488, 391, 375, 240, 359, 171, 257, 241, 318, 198, 1,
                425, 254, 238, 270, 270, 346, 105, 69, 298, 3, 499, 328, 147, 119, 155, 422, 1, 126, 135, 74, 237, 163, 419, 99, 471, 137, 372, 82, 86, 214, 423, 170, 292,
                402, 266, 237, 297, 319, 284, 460, 107, 6, 334, 387, 346, 76, 336, 498, 393, 256, 13, 274, 17, 264, 269, 206, 131, 311, 73, 175, 325, 231, 306, 220, 215, 230,
                365, 76, 459, 280, 285, 480, 37, 118, 402, 180,
                182, 237, 179, 131, 469, 315, 289, 437, 433, 24, 231, 413, 278, 26, 458, 441, 416, 304, 367, 186, 271, 490, 380, 14, 409, 266, 339, 309, 128, 434, 454, 57,
                300, 448, 273, 32, 268, 234, 420, 69, 461, 371, 226, 425, 169, 76, 465, 137, 85, 370, 52, 225, 292, 313, 476, 54, 495, 461, 70, 132, 462, 301, 263, 383, 117,
                339, 413, 275, 488, 13, 243, 25, 429, 372, 174, 456, 303, 443, 130, 195, 364, 178, 387, 401, 401, 211, 278, 461, 301, 473, 281, 259, 225, 385, 303, 149, 98,
                108, 123, 247, 313, 15, 100, 70, 154, 299, 308,
                261, 263, 373, 94, 148, 2, 469, 142, 222, 453, 297, 35, 390, 468, 121, 283, 422, 129, 171, 46, 391, 303, 71, 469, 389, 115, 294, 299, 118, 479, 217, 23, 261,
                174, 18, 407, 473, 460, 457, 28, 102, 211, 144, 116, 304, 213, 483, 221, 443, 244, 276, 19, 125, 255, 239, 290, 323, 360, 217, 291, 397,
                375, 434, 366, 333, 434, 449, 406, 293, 235, 376, 442, 399, 288, 443, 322, 31, 83, 267, 356, 367, 382, 228, 251, 110, 148, 122, 295, 481, 194, 296, 263, 268,
                189, 46, 132, 45, 209, 385, 236, 138, 158, 444, 283, 184, 386, 252, 308, 109, 180, 364, 422, 120, 205, 72, 166, 127, 321, 209, 16, 423, 387, 48, 48, 395, 17,
                117, 122, 418, 160, 201, 345, 215, 119, 124, 53, 345, 212, 493, 442, 341, 8, 145, 33, 382, 248, 98, 411, 387, 377, 423, 99, 415, 279, 34, 277, 474, 78, 389,
                256, 193, 235, 321, 495, 160, 65, 483, 281, 34,
                81, 454, 239, 298, 57, 191, 355, 224, 221, 132, 298, 277, 199, 306, 147, 286, 460, 84, 416, 43, 225, 460, 409, 399, 89, 38, 262, 494, 227, 300, 232, 433, 37, 175,
                144, 172, 420, 408, 326, 120, 174, 491, 342, 329, 414, 307, 389, 162, 85, 330, 11, 333, 98, 64, 26, 59, 140, 455, 141, 291, 156, 191, 57, 56, 25, 487, 164, 157,
                212, 329, 74, 331, 124, 199, 409, 176, 144, 436, 488, 192, 37, 33, 483, 150, 498, 57, 273, 403, 27, 372, 22, 464, 139, 345, 104, 455, 404, 234, 262, 471, 361,
                33, 56, 56, 483, 475, 307, 438, 26, 401, 73, 394, 132, 417, 157, 145, 317, 425, 256, 437, 191, 454, 194, 233, 411, 147, 469, 324, 45, 89, 355, 456, 146, 298,
                367, 391, 361, 391, 309, 310, 78, 48, 308, 470, 20, 164, 397, 427, 116, 305, 218, 220, 227, 152, 455, 325, 448, 375, 233, 188, 315, 376, 473, 421, 421, 296,
                442, 478, 201, 202, 443, 220, 386, 463, 293, 60, 269, 321, 189, 465, 154, 25, 362, 345, 356, 354, 58, 452, 106, 177, 446, 223, 190, 33, 325, 428, 208, 69, 296,
                388, 428, 327, 109, 431, 265, 184, 310, 464, 222, 110, 459, 94, 290, 25, 203, 165, 228, 56, 313, 56, 177, 439, 452, 297, 120, 153, 77, 316, 280, 317, 432, 27,
                267, 131, 233, 103, 34, 315, 271, 58, 20,
                237, 63, 224, 395, 308, 205, 32, 362, 70, 343, 198, 145, 25, 292, 373, 309, 424, 241, 492, 63, 211, 48, 192, 38, 185, 267, 267, 55, 467, 182, 84, 329, 84, 310,
                366, 234, 225, 341, 129, 179, 290, 241, 263, 232, 117, 8, 154, 486, 366, 370, 500, 356, 44, 151, 451, 475, 410, 275, 452, 289, 7, 103, 306, 258, 285, 184, 279,
                217, 325, 143, 39, 298, 45, 257, 258, 375, 270, 39, 415, 435, 335, 129, 87, 436, 466, 131, 76, 171, 165, 463, 101, 446, 299, 180, 494, 328, 367, 273, 366, 281,
                443, 132, 109, 126, 50, 455, 282, 298, 363, 398, 171, 386, 391, 461, 411, 88, 353, 178, 355, 221, 307, 356, 217, 294, 470, 196, 446, 45, 304, 340, 378, 182,
                88, 249, 243, 46, 359, 26, 244, 285, 499, 164, 35, 244, 129, 118, 52, 202, 256, 237, 93, 1, 460, 35, 490, 176, 485, 59, 416, 407, 363, 90, 466, 224, 267, 70,
                496, 286, 416, 101, 342, 245, 426, 357, 164, 239, 133, 498, 62, 184, 285, 45, 244, 459, 77, 261, 277, 443, 158, 249, 309, 285, 80, 374, 472, 106, 28, 431, 480,
                233, 426, 323, 215, 55, 277, 292, 46, 403,
                406, 15, 367, 63, 327, 173, 454, 319, 183, 209, 92, 323, 7, 115, 348, 212, 91, 405, 106, 251, 452, 208, 285, 441, 436, 308, 143, 112, 445, 176, 271, 33, 205,
                466, 463, 227, 247, 495, 478, 423, 320, 13, 183, 119, 150, 123, 288, 236, 489, 84, 238, 169, 375, 39, 52, 481, 230, 367, 178, 163, 101, 116, 355, 130, 371, 481,
                179, 469, 303, 471, 433, 327, 465, 362, 169, 122, 96, 351, 226, 435, 38, 455, 141, 300, 458, 424, 426, 258, 47, 182, 105, 262, 481, 156, 98, 158, 287, 218, 109,
                174, 190, 119, 55, 499, 275, 197, 251, 441, 25, 136, 322, 88, 79, 434, 63, 192, 181, 241, 455, 1, 476, 171, 1, 144, 399, 271, 170, 70, 115, 229, 377, 70, 270,
                110, 121, 445, 218, 266, 8, 409, 153, 71, 251, 444, 322, 20, 353, 100, 211, 76, 497, 49, 84, 253, 200, 473, 74, 191, 85, 403, 225, 426, 428, 454, 45, 397, 57,
                62, 271, 341, 217, 354, 114, 173, 181,
                68, 302, 155, 277, 309, 453, 378, 139, 187, 279, 222, 271, 334, 205, 415, 236, 497, 444, 477, 30, 395, 226, 337, 377, 89, 220, 172, 290, 202, 492, 315, 491, 273,
                21, 488, 364, 108, 50, 311, 290, 252, 496, 243,
                402, 431, 143, 471, 202, 197, 283, 157, 422, 233, 202, 376, 373, 380, 464, 299, 17, 12, 282, 273, 183, 238, 48, 174, 363, 233, 259, 316, 270, 377, 429, 57, 166,
                28, 485, 7, 16, 223, 32, 164, 490, 315, 181, 256, 266, 33, 101, 84, 118, 88, 210, 18, 232, 422, 488, 115, 351, 220, 29, 24, 68, 281, 170, 125, 83, 134, 110, 46,
                82, 185, 415, 471, 105, 422, 247, 106, 445, 90, 480, 224, 377, 68, 259, 273, 95, 320, 398, 299, 198, 356, 213, 141, 429, 136, 463, 283, 318, 409, 1, 333, 316,
                231, 381, 479, 235, 293, 299, 299,
                381, 44, 142, 237, 279, 239, 96, 50, 371, 46, 236, 282, 5, 247, 84, 89, 37, 29, 464, 129, 75, 83, 43, 468, 334, 225, 104, 373, 406, 150, 31, 419, 202, 304, 229,
                167, 163, 360, 390, 364, 323, 160, 282, 15, 200, 77, 317, 167, 68, 176, 301, 112, 37, 232, 484, 65, 285, 200, 227, 174, 42, 275, 365, 152, 241, 48, 182, 342,
                377, 75, 5, 462, 50, 87, 264, 383, 244, 38, 65, 475, 399, 385, 64, 19, 455, 398, 402, 392, 108, 393, 479, 450, 234, 354, 82, 387, 119, 222, 101, 185, 500, 476,
                169, 376, 431, 357, 468, 53, 386, 201,
                213, 311, 318, 51, 487, 304, 25, 176, 132, 135, 249, 306, 490, 126, 362, 336, 165, 451, 310, 424, 183, 82, 77, 399, 290, 143, 257, 187, 346, 256, 430, 48, 471,
                92, 493, 109, 47, 491, 216, 450, 141, 321, 197, 466, 191, 334, 250, 75, 313, 33, 327, 275, 80, 157, 176, 144, 483, 82, 39, 18, 356, 302, 408, 298,
                373, 372, 174, 42, 210, 423, 133, 467, 134, 379, 298, 271, 285, 50, 431, 135, 267, 129, 180, 318, 228, 384, 451, 186, 92, 141, 7, 207, 75, 399, 3, 329, 13, 166,
                158, 321, 153, 369, 385, 326, 414, 41, 118, 129, 278, 4, 85, 410, 345, 148, 91, 319, 172, 17, 337, 385, 318, 137, 6, 411, 405, 315, 311, 237, 202, 9, 396, 278,
                332, 364, 84, 399, 387, 350, 116, 63, 26, 120, 30, 367, 417, 36, 231, 381, 404, 216, 493, 372, 297, 381, 466, 293, 331, 267, 310, 94, 12, 249, 474, 474, 96, 71,
                302, 362, 72, 439, 228, 303, 355,
                389, 55, 266, 3, 302, 289, 450, 135, 420, 489, 63, 29, 432, 370, 415, 7, 463, 280, 128, 355, 485, 429, 437, 224, 469, 256, 310, 140, 11, 19, 302, 399, 152, 415,
                385, 246, 246, 409, 441, 285, 170, 46, 124, 363, 228,
                334, 333, 298, 134, 224, 146, 330, 419, 211, 179, 154, 34, 221, 248, 471, 335, 459, 250, 308, 479, 70, 239, 233, 427, 478, 3, 302, 12, 224, 188, 201, 450, 82,
                388, 326, 454, 456, 41, 95, 321, 136, 463, 276, 471, 272, 471, 305, 127, 242, 228, 340, 56, 356, 421, 264, 218, 177, 307, 182, 94, 278, 241, 499, 242, 15, 110,
                316, 436, 323, 496, 183, 144, 355, 23, 137, 222, 208, 259, 445, 435, 121, 453, 96, 425, 48, 287, 32, 272, 474, 398, 23, 211, 27, 366, 246, 143, 422, 162, 221, 296,
                410, 13, 20, 422, 310, 156, 495,
                78, 84, 51, 297, 474, 381, 59, 320, 360, 32, 87, 470, 348, 37, 353, 191, 256, 8, 204, 325, 349, 25, 360, 361, 91, 12, 399, 358, 113, 69, 178, 330, 382, 75, 273,
                184, 243, 321, 32, 1, 228, 480, 325, 47, 420, 27, 140, 350, 277, 238, 401, 28, 442, 208, 95, 301, 357, 196, 413, 248, 109, 414, 167, 311, 36, 11, 15, 277, 6,
                427, 449, 134, 44, 371, 427, 299, 134, 328, 338, 208, 466, 392, 359, 304, 59, 35, 334, 25, 370, 396, 230, 210, 349, 313, 155, 493, 71, 490, 475, 240, 396, 371,
                101, 233, 57, 182, 408, 111, 354, 218, 146, 450, 163, 342, 130, 234, 391, 419, 33, 481, 283, 444, 22, 420, 466, 418, 400, 68, 19, 64, 128, 109, 442, 416, 17, 15,
                207, 26, 186, 174, 87, 453, 416, 130, 19, 153, 250, 66, 288, 295, 145, 107, 222, 324, 382, 479, 301, 56, 392, 484, 68, 458, 274, 136, 288, 113, 6, 302, 309,
                295, 420, 406, 305, 127,
                497, 236, 113, 354, 339, 369, 383, 55, 227, 418, 472, 466, 484, 281, 281, 138, 472, 393, 94, 186, 458, 4, 185, 460, 391, 192, 21, 221, 369, 293, 283, 418, 192,
                246, 66, 27, 364, 402, 42, 430, 274, 28, 143, 404, 473, 429, 351, 224, 291, 454, 33, 389, 51, 129, 127, 93, 375, 84, 447, 350, 117, 252, 388, 112, 44, 414, 66,
                78, 461, 285, 136, 465, 44, 201, 230, 329, 410, 435, 444, 333, 428, 136, 448, 87, 120, 113, 395, 88, 424, 282, 45, 335, 394, 480, 180, 65, 306, 240, 172, 91, 80,
                130, 203, 478, 110, 419, 498, 409,
                255, 460, 104, 256, 235, 126, 277, 323, 215, 431, 189, 154, 168, 359, 90, 330, 240, 392, 435, 487, 368, 339, 174, 423, 212, 292, 216, 333, 70, 414, 85, 335,
                242,
                429, 365, 326, 56, 283, 211, 222, 74, 450, 337, 303, 163, 83, 94, 85, 448, 154, 302, 28, 84, 199, 170, 239, 239, 205, 46, 498, 382, 157, 136, 145, 24, 208, 419,
                324, 28, 285, 118, 330, 258, 138, 11, 221, 47, 6, 465, 41, 224, 443, 351, 243, 467, 229, 239, 226, 190, 296, 282, 426, 380, 44, 192, 52, 64, 123, 57, 60, 47, 183,
                460, 325, 9, 137, 24, 124, 174, 383, 138, 170, 471, 158, 86, 352, 451, 29, 112, 104, 202, 95, 108, 322, 313, 47, 275, 174, 35, 466, 441, 429, 187, 419, 378, 367,
                66, 119, 310, 2, 64, 98, 180,
                226, 224, 112, 136, 327, 398, 336, 109, 414, 24, 422, 385, 445, 421, 177, 473, 115, 190, 423, 197, 464, 125, 144, 34, 118, 52, 325, 218, 326, 443, 109, 102, 119,
                393, 261, 349, 332, 482, 471, 170, 485, 212, 249,
                313, 372, 455, 361, 172, 335, 193, 126, 229, 207, 494, 106, 448, 109, 163, 220, 177, 433, 178, 120, 252, 58, 346, 295, 157, 412, 189, 412, 447, 117, 287, 459, 493,
                194, 319, 491, 109, 246, 355, 442, 218, 236, 419, 301, 154, 271, 402, 181, 188, 112, 446, 425, 204, 338, 275, 452, 292, 431, 344, 43, 233, 209, 103, 329, 157, 306,
                272, 5, 418, 320, 116, 410, 112, 256, 172, 122, 295, 225, 284, 326, 24, 171, 451, 92, 308, 223, 265, 392, 282, 346, 66, 171, 411, 477, 9, 257, 364, 410, 288,
                305, 107, 229, 450, 174};

        try {
            for (int j = 0; j < 500; j++) {
                kvClient_FIFO.put("KEY" + j, "VAL" + j);
                kvClient_LRU.put("KEY" + j, "VAL" + j);
                kvClient_LRU.put("KEY" + j, "VAL" + j);
            }
        } catch (Exception e) {
        }
        //assertNull(ex);

        int[] num_access = new int[]{200, 500, 800};
        for (int j = 0; j < 3; j++) {
            int num_get = num_access[j];
            int num_put = num_access[2 - j];
            long get_time = 0, put_time = 0;

            try {
                long start = System.currentTimeMillis();
                for (int k = 0; k < num_get; k++) {
                    kvClient_FIFO.get("KEY" + access_sequence[j]);
                }
                get_time = System.currentTimeMillis() - start;

                start = System.currentTimeMillis();
                for (int k = num_get; k < 5000; k++) {
                    kvClient_FIFO.put("KEY" + access_sequence[j], "1VAL" + access_sequence[j]);
                }
                put_time = System.currentTimeMillis() - start;

            } catch (Exception e) {
            }
            //assertNull(ex);

            logger.info("FIFO, Cache size: 10 # of GET: ," + num_get + ", # of PUT: ," + num_put +
                    ", GET time: ," + get_time + ", PUT time: ," + put_time);

            try {
                long start = System.currentTimeMillis();
                for (int k = 0; k < num_get; k++) {
                    kvClient_LRU.get("KEY" + access_sequence[j]);
                }
                get_time = System.currentTimeMillis() - start;

                start = System.currentTimeMillis();
                for (int k = num_get; k < 5000; k++) {
                    kvClient_LRU.put("KEY" + access_sequence[j], "1VAL" + access_sequence[j]);
                }
                put_time = System.currentTimeMillis() - start;

            } catch (Exception e) {
            }
            //assertNull(ex);

            logger.info("LRU, Cache size: 10 # of GET: ," + num_get + ", # of PUT: ," + num_put +
                    ", GET time: ," + get_time + ", PUT time: ," + put_time);

            try {
                long start = System.currentTimeMillis();
                for (int k = 0; k < num_get; k++) {
                    kvClient_LFU.get("KEY" + access_sequence[j]);
                }
                get_time = System.currentTimeMillis() - start;

                start = System.currentTimeMillis();
                for (int k = num_get; k < 5000; k++) {
                    kvClient_LFU.put("KEY" + access_sequence[j], "1VAL" + access_sequence[j]);
                }
                put_time = System.currentTimeMillis() - start;

            } catch (Exception e) {
            }
            //assertNull(ex);

            logger.info("LFU, Cache size: 10 # of GET: ," + num_get + ", # of PUT: ," + num_put +
                    ", GET time: ," + get_time + ", PUT time: ," + put_time);
        }

    }

}

